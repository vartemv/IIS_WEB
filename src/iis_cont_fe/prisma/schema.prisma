generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  id       Int      @id @default(autoincrement())
  post_id  Int
  content  String
  author   String
  datetime DateTime @db.Timestamp(6)
  posts    posts    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([post_id], map: "idx_comments_post_id")
  @@index([post_id, datetime], map: "idx_comments_post_id_datetime")
}

model group_posts {
  group_name String   @db.VarChar(100)
  post_id    Int
  datum      DateTime @db.Date
  groups     groups   @relation(fields: [group_name], references: [group_name], onDelete: Cascade, onUpdate: NoAction)
  posts      posts    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([group_name, post_id])
}

model groups {
  group_name  String        @id @db.VarChar(100)
  pocet       Int?          @default(0)
  owner       Int
  datum       DateTime      @db.Date
  group_posts group_posts[]
  user_groups user_groups[]
}

model post_tags {
  post_id Int
  tag_id  Int
  posts   posts @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags    tags  @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([post_id, tag_id])
  @@index([post_id], map: "idx_post_tags_post_id")
}

model posts {
  id           Int           @id @default(autoincrement())
  user_id      Int
  datetime     DateTime      @db.Timestamp(6)
  mediafile    String?       @db.VarChar(255)
  description  String?
  location     String?       @db.VarChar(255)
  availability Boolean?      @default(true)
  comments     comments[]
  group_posts  group_posts[]
  post_tags    post_tags[]
  users        users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reactions    reactions[]
}

model reactions {
  id      Int   @id @default(autoincrement())
  post_id Int
  amount  Int?
  posts   posts @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([post_id], map: "idx_reactions_post_id")
  @@index([post_id, amount], map: "idx_reactions_post_id_amount")
}

model tags {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(100)
  post_tags post_tags[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model user_groups {
  id_of_user Int
  group_name String   @db.VarChar(100)
  status     String?  @default("Active") @db.VarChar(10)
  datum      DateTime @db.Date
  groups     groups   @relation(fields: [group_name], references: [group_name], onDelete: Cascade, onUpdate: NoAction)
  users      users    @relation(fields: [id_of_user], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([id_of_user, group_name])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id            Int           @id @default(autoincrement())
  first_name    String        @db.VarChar(50)
  last_name     String        @db.VarChar(50)
  profile_name  String        @unique @db.VarChar(50)
  sign_up_date  DateTime      @db.Date
  hash_password String        @db.VarChar(255)
  email         String        @unique @db.VarChar(255)
  role          String?       @default("User") @db.VarChar(10)
  posts         posts[]
  user_groups   user_groups[]
}
